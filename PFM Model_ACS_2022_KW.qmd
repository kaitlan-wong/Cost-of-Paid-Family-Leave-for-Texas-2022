---
title: "Cost of Paid Family Leave for Texas, 2022"
author: "Kaitlan Wong, based off Coda Rayo-Garza's 2019 analysis"
format: html
editor: visual
---

## Methods - Calculating Number of Employed People and Max Benefits Using ACS Data

------------------------------------------------------------------------

For this estimate, I am utilizing 2022 American Community Survey (ACS) 1-Year estimates from IPUMS USA. The parameters for estimating costs to Texas include:

-   Max benefit of 12 weeks paid parental leave for all workers that have worked a minimum of 3 months of full time employment OR 540 hours in the last year (note: Coda's notes said past 6 months, I am using past year)

-   Salary replacement between 80 and 100 percent of worker's wages based on their weekly earnings;

-   Maximum weekly benefit of \$1,117.69 (per Amanda's email)

The ACS variables I am using include:

-   [INCWAGE](https://usa.ipums.org/usa-action/variables/INCWAGE#description_section): total pre-tax wage and salary income - that is, money received as an employee - for the previous year.

-   [EMPSTAT](https://usa.ipums.org/usa-action/variables/EMPSTAT#description_section): indicates whether the respondent was a part of the labor force \-- working or seeking work \-- and, if so, whether the person was currently unemployed

-   [UHRSWORK](https://usa.ipums.org/usa-action/variables/UHRSWORK#description_section): number of hours per week that the respondent usually worked, if the person worked during the previous year.

-   [WKSWORK1](https://usa.ipums.org/usa-action/variables/WKSWORK1#description_section): number of weeks that the respondent worked for profit, pay, or as an unpaid family worker during the previous year.

I filtered the data to only be for the state of Texas (FIPS = 48) in IPUMS before downloading the data.

## Load ACS Data

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library (ipumsr)
library(writexl)
```

```{r}

# Read in ipums data

ddi <- read_ipums_ddi("usa_00038.xml")
data <- read_ipums_micro(ddi, data_file = ("usa_00038.datgz"), verbose = FALSE)
```

```{r}

# make variable name lowercase
names(data) <- tolower(names(data))

# preview data
head(data)

# check variable names are correct
names(data)
```

## ACS Data Prep

```{r}

# convert data to tibble for better readability 
work_data <- as_tibble(data)

# Clean data
work_data <- work_data %>%
  mutate(hryear = uhrswork * wkswork1) %>% # create a variable for the hours worked in a year
  
  filter(incwage != 999999, # remove NA values from income variable
         incwage != 999998, # remove missing values from income variable
         empstat==1, # was employed last year
         (wkswork1 >= 12 & uhrswork >= 40) | (hryear >=540), # worked at least 12 weeks (roughly 3 months) full-time OR 540 hours in past 12 months
         # worked at least 540 hours last year
         age>=18,
         age<=50) # only looking at people age 18-50 years

```

## ACS Data Analysis

### The Formula

```{r}

# 80% salary replacement
work_data_80 <- work_data %>%
  mutate(wkwage = incwage / wkswork1,       # create weekly wage variable
         mxbnft = wkwage * 0.8,             # 80% salary replacement
         capped = ifelse(mxbnft > 1117.69, 1117.69, mxbnft)) %>% # using BLS average salary of $61,320 (weekly salary of $1,117.69) per Amanda's email
  filter(complete.cases(capped))

avg_ben_weighted_80 <- weighted.mean(work_data_80$capped, work_data_80$perwt)
avg_ben_unweighted_80 <- mean(work_data_80$capped) # I will use the weighted average, but including unweighted for comparison

# print results for 80%
print(paste("Weighted average (80% cap):", avg_ben_weighted_80))
print(paste("Unweighted average (80% cap):", avg_ben_unweighted_80))


# 90% salary replacement
work_data_90 <- work_data %>%
  mutate(wkwage = incwage / wkswork1,       
         mxbnft = wkwage * 0.9,             # 90% salary replacement
         capped = ifelse(mxbnft > 1117.69, 1117.69, mxbnft)) %>%
  filter(complete.cases(capped))

avg_ben_weighted_90 <- weighted.mean(work_data_90$capped, work_data_90$perwt)
avg_ben_unweighted_90 <- mean(work_data_90$capped)

# print results for 90%
print(paste("Weighted average (90% cap):", avg_ben_weighted_90))
print(paste("Unweighted average (90% cap):", avg_ben_unweighted_90))


# 100% salary replacement
work_data_100 <- work_data %>%
  mutate(wkwage = incwage / wkswork1,       
         mxbnft = wkwage,                   # 100% salary replacement
         capped = ifelse(mxbnft > 1117.69, 1117.69, mxbnft)) %>%
  filter(complete.cases(capped))

avg_ben_weighted_100 <- weighted.mean(work_data_100$capped, work_data_100$perwt)
avg_ben_unweighted_100 <- mean(work_data_100$capped)

# print results for 100%
print(paste("Weighted average (100% cap):", avg_ben_weighted_100))
print(paste("Unweighted average (100% cap):", avg_ben_unweighted_100))

```

### Compare Number of Observations in ACS Data

```{r}
# I was curious how many observations I dropped after adding all my criteria

cat("Number of observations in data:", nrow(data), "\n")
cat("Number of observations in work_data:", nrow(work_data), "\n")
cat("Number of observations in work_data_80:", nrow(work_data_80), "\n")
cat("Number of observations in work_data_90:", nrow(work_data_90), "\n")
cat("Number of observations in work_data_100:", nrow(work_data_100), "\n")

# we did not lose any observations during the Formula section
```

### Average Benefits using mxbnft

Coda left a comment about how she was unsure if we should use **mxbnft** or **capped** to calculate the average max benefits. I believe we should use capped, but am including the averages for mxbnft for reference.

```{r}

### 80% cap ###

#Calculate the WEIGHTED average weekly benefit
avg_ben_weighted_mxbnft <- weighted.mean(work_data_80$mxbnft, work_data_80$perwt)

print(avg_ben_weighted_mxbnft)

# For comparison -- these are the UNWEIGHTED results 
# Calculate the average weekly benefit for everyone who qualifies 
avg_ben_unweighted_mxbnft <- mean(work_data_80$mxbnft)

print(avg_ben_unweighted_mxbnft)


### 90% cap ###

#Calculate the WEIGHTED average weekly benefit
avg_ben_weighted_mxbnft <- weighted.mean(work_data_90$mxbnft, work_data_90$perwt)

print(avg_ben_weighted_mxbnft)

# For comparison -- these are the UNWEIGHTED results 
# Calculate the average weekly benefit for everyone who qualifies 
avg_ben_unweighted_mxbnft <- mean(work_data_90$mxbnft)

print(avg_ben_unweighted_mxbnft)


### 100% cap ###

#Calculate the WEIGHTED average weekly benefit
avg_ben_weighted_mxbnft <- weighted.mean(work_data_100$mxbnft, work_data_100$perwt)

print(avg_ben_weighted_mxbnft)

# For comparison -- these are the UNWEIGHTED results 
# Calculate the average weekly benefit for everyone who qualifies 
avg_ben_unweighted_mxbnft <- mean(work_data_100$mxbnft)

print(avg_ben_unweighted_mxbnft)
```

### Figure out Eligible Workers

```{r}

# Calculate the total weight of the sample (result is total Texans eligible for parental leave)
total_weight <- sum(work_data$perwt)

total_weight

na.omit(work_data)
```

## Using California Usage Rates

##### Data for California is used since CPS data is unreliable for Texas.

According to the California Employment Development Department, the labor force participation rate in was 63%. The average employment for 18,614,608 ([https://labormarketinfo.edd.ca.gov/data/Top-Statistics.html#LFP](https://labormarketinfo.edd.ca.gov/data/Top-Statistics.html#LFPhttps://labormarketinfo.edd.ca.gov/data/Top-Statistics.html#LFP))

In 2019, there were a total of 279,916 total paid family leave claims paid by CA. There were 297,446 claims filled. ([https://data.edd.ca.gov/d/r95e-fvkm/visualization](https://data.edd.ca.gov/d/r95e-fvkm/visualizationhttps://data.edd.ca.gov/d/r95e-fvkm/visualization))

The formula for take-up rates is the \# of family leave claims divided by total \# of people employed \*100.

The CA usage rate is therefore: 1.5% , which much higher than the .79% rate from CS's 2013 paper.

```{r}

# 2019 employment numbers by month
# 18516400+18532300+18548300+18566300+18584900+18601600+18615000+18628100+18649700+18680000+18714200+18738500

279916/18614608*100 # leave claims / number of employed people



# Kaitlan note: dashboards are taking forever to load so I can't get the lastest numbers right now. Using 2019 for now and can update later.

# Updated employment numbers by month: ... (add later)

```

## Estimate of Texans Who Will Use Paid Leave

**Updated Numbers:**

-   2022 Number of Eligible Workers in Texas: **9,839,015**

-   If I calculate by CA's 2019 usage rate, the result is 43,223 (I will get an updated rate from California at a later time. The website is taking too long to load so I can't get the data right now.)

```{r}
# Coda's 2019 calculation (for reference)

#eligible Texans multiplied by the TU rate based on CA 2019 #'s
  
9568733*.011   # KW Question: Why did Coda use 0.11 and not 0.015?
201118.3*620 #then mulitply by average weekly wage 
124693346*12 
#then multiply by # of weeks they will use the program (max is 12)


#total cost of program minus admin costs 

```

```{r}
# Kaitlan's updated 2022 calculation

# Calculate number of people who took parental leave (eligible Texans multiplied by the TU rate based on CA 2019 #'s)
took_leave <- total_weight*.015
print(paste("# Took Leave:", took_leave))

# then mulitply by average weekly benefits (weighted amount is $631.4955)
avg_weekly_80 <- took_leave * avg_ben_weighted_80
avg_weekly_90 <- took_leave * avg_ben_weighted_90
avg_weekly_100 <- took_leave * avg_ben_weighted_100

print(paste("Total Weekly Cost (80% cap):", avg_weekly_80))
print(paste("Total Weekly Cost (90% cap):", avg_weekly_90))
print(paste("Total Weekly Cost (100% cap):", avg_weekly_100))

# then multiply by # of weeks they will use the program (max is 12) to get total wages paid out
total_cost_80 <- avg_weekly_80*12 
print(paste("Total Annual Cost (80% cap):", total_cost_80))

total_cost_90 <- avg_weekly_90*12 
print(paste("Total Annual Cost (90% cap):", total_cost_90))

total_cost_100 <- avg_weekly_100*12 
print(paste("Total Annual Cost (100% cap):", total_cost_100))
```

Save Data To Excel

```{r}
write_xlsx(work_data, "pfl_22_KW.xlsx")

write_xlsx(work_data_80, "pfl_80cap_2022_KW.xlsx")

write_xlsx(work_data_90, "pfl_90cap_2022_KW.xlsx")

write_xlsx(work_data_100, "pfl_100cap_2022_KW.xlsx")
```

### Summary of Findings (for Texas in 2022)

Unrounded

|                                         | 80% Cap               | 90% Cap               | 80%                   |
|-----------------------------|---------------|---------------|---------------|
| **Workers Eligible**                    | 9,866,399             | 9,866,399             | 9,866,399             |
| **Number People Using Family Leave**    | 147,996               | 147,996               | 147,996               |
| **Average Weekly Benefit**              | \$662.081443561961    | \$707.729119808534    | \$746.851038015554    |
| **Total Program Benefits Annual Costs** | \$1,175,824,744.68209 | \$1,256,892,818.39096 | \$1,326,371,460.23261 |

Rounded

|                                         | 80% Cap         | 90% Cap         | 80%             |
|--------------------------|----------------|----------------|----------------|
| **Workers Eligible**                    | 9,866,399       | 9,866,399       | 9,866,399       |
| **Number People Using Family Leave**    | 147,996         | 147,996         | 147,996         |
| **Average Weekly Benefit**              | \$662           | \$708           | \$747           |
| **Total Program Benefits Annual Costs** | \$1,175,824,745 | \$1,256,892,818 | \$1,326,371,460 |

## Note on CPS Data

------------------------------------------------------------------------

**Note from Coda's 2019 analysis:** *"Tried with CPS data using the"Why Absent" variables and observations dropped too low. The problem I encountered was that the \#'s for the maternal/paternal variable were too low."*

I tried using more recent CPS data. Here are the umber of observations I got:

-   42 in 2024

-   76 in 2023

-   87 in 2022

-   50 in 2021

-   0 in 2020

-   0 in 2019

-   0 in 2018

-   0 in 2017

Since these are very small population sizes, I decided not to use CPS data for the final analysis and instead use California Usage Rates.

## Methods - Calculating the Number of People Taking Parental Leave Using CPS Data

------------------------------------------------------------------------

I am using Current Population Survey data from IPUMS CPS to calculate the rate of working Texas adults who took parental leave.

The CPS variable I am using is:

-   [WHYABSNT](https://cps.ipums.org/cps-action/variables/WHYABSNT#description_section): reports the reason for the absence of jobholders who were not working during the preceding week

-   [WTFINL](https://cps.ipums.org/cps-action/variables/WTFINL#description_section): final person-level weight that should be used in analyses of basic monthly data.

I filtered the data to only be for the state of Texas (FIPS = 48) in IPUMS before downloading the data.

## Load CPS Data

```{r}
cps_ddi<- read_ipums_ddi("cps_00008.xml")
cps_data <- read_ipums_micro(cps_ddi, data_file = ("cps_00008.dat.gz"), verbose = FALSE)

# check out data
names(cps_data) <- tolower(names(cps_data))
head(cps_data)
names(cps_data)
```

## CPS Data Prep

```{r}
# filter data
cps_data2 <- filter(cps_data,
                    whyabsnt == 9, # select only people who took parental leave
                    year == 2024, # select year
                    !is.na(wtfinl)) # remove missing values from final person weight  

# # Weight the data by the final weight
# cps_data3 <- svydesign(ids = ~pernum, weights = ~wtfinl, data = cps_data2)
# # Calculate the number of workers who were absent from work on maternity/paternity leave
# num_parental_leave <- svytotal(~1, design = cps_data3)
# #Print the result
# print(num_parental_leave)
# #Count the number of observations for each value in the WHYABSNT variable in original dataset
# table(cps_data$whyabsnt)
```
